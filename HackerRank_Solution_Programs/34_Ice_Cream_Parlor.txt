// Ice Cream Parlor - Solution Program

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// function to solve ice cream parlor problem
int* icecreamParlor(int m, int cost_count, int* cost, int* result_count) {
    *result_count = 2;
    int* result = malloc(2 * sizeof(int));

    for (int i = 0; i < cost_count; i++) {
        for (int j = i + 1; j < cost_count; j++) {
            if (cost[i] + cost[j] == m) {
                result[0] = i + 1;   // 1-based index
                result[1] = j + 1;
                return result;       // unique solution guaranteed
            }
        }
    }
    return result; // fallback
}

int main() {
    int t;
    scanf("%d", &t);

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int m, n;
        scanf("%d", &m);
        scanf("%d", &n);

        int* cost = malloc(n * sizeof(int));
        for (int i = 0; i < n; i++) {
            scanf("%d", &cost[i]);
        }

        int result_count;
        int* result = icecreamParlor(m, n, cost, &result_count);

        for (int i = 0; i < result_count; i++) {
            printf("%d", result[i]);
            if (i < result_count - 1) printf(" ");
        }
        printf("\n");

        free(cost);
        free(result);
    }

    return 0;
}
