// Jesse and Cookies - Solution program

#include <stdio.h>
#include <stdlib.h>

void heapify(int a[], int n, int i) {
    int smallest = i, l = 2*i+1, r = 2*i+2;
    if(l<n && a[l]<a[smallest]) smallest=l;
    if(r<n && a[r]<a[smallest]) smallest=r;
    if(smallest!=i) { int t=a[i]; a[i]=a[smallest]; a[smallest]=t; heapify(a,n,smallest); }
}

int extractMin(int a[], int *n) {
    if(*n==0) return -1;
    int root=a[0];
    a[0]=a[--(*n)];
    heapify(a,*n,0);
    return root;
}

void insert(int a[], int *n, int val) {
    int i=(*n)++;
    a[i]=val;
    while(i && a[(i-1)/2]>a[i]) {
        int t=a[i]; a[i]=a[(i-1)/2]; a[(i-1)/2]=t;
        i=(i-1)/2;
    }
}

int cookies(int k,int a[],int n) {
    // build heap
    for(int i=n/2-1;i>=0;i--) heapify(a,n,i);

    int ops=0;
    while(n>0 && a[0]<k) {
        if(n<2) return -1; // not possible
        int x=extractMin(a,&n);
        int y=extractMin(a,&n);
        insert(a,&n, x+2*y);
        ops++;
    }
    return ops;
}

int main() {
    int n,k; scanf("%d %d",&n,&k);
    int a[n]; for(int i=0;i<n;i++) scanf("%d",&a[i]);
    printf("%d\n",cookies(k,a,n));
    return 0;
}
